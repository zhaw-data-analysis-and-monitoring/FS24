---
date: 2023-10-16
lesson: PrePro2
thema: Piping / Joins
index: 2
execute: 
  echo: true   # set to true to show musterlösung
  output: true # set to true to show musterlösung
code-fold: true
code-summary: "Musterlösung"
knitr:
  opts_chunk: 
    collapse: true
---

# Prepro 2: Übung A

```{r}
#| echo: true
#| code-fold: false

library("dplyr")
library("readr")
library("lubridate")

# Alternativ kannst du alle tidyverse packages mit library("tidyverse") laden
```

## Aufgabe 1

Lese die Wetterdaten von letzer Woche *weather.csv* (Quelle MeteoSchweiz) in `R` ein. Sorge dafür, dass die Spalten korrekt formatiert sind (`stn` als `factor`, `time` als `POSIXct`, `tre200h0` als `numeric`.)

```{r}
# Variante 1
wetter <- read_delim("datasets/prepro/weather.csv", ",")
wetter$stn <- as.factor(wetter$stn)
wetter$time <- as.POSIXct(as.character(wetter$time), format = "%Y%m%d%H", tz = "UTC")
```

```{r}
# Variate 2 (für Profis)
wetter <- read_csv("datasets/prepro/weather.csv",
  col_types = cols(
    col_factor(levels = NULL),
    col_datetime(format = "%Y%m%d%H"),
    col_double()
  )
)
```

## Aufgabe 2

Lese den Datensatz *metadata.csv* ebenfalls als csv ein.

:::{.callout-tip}
Wenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. das è in Gen*è*ve), hat das vermutlich mit der [Zeichencodierung](https://de.wikipedia.org/wiki/Zeichenkodierung) zu tun. Das File ist aktuell in *UTF-8* codiert. Wenn Umlaute nicht korrekt dargestellt werden, hat R diese Codierung nicht erkannt und sie muss in der Import-Funktion spezifitiert werden. Dies wird je nach verwendete import Funktion unterschiedlich gemacht:

- Funktionen aus dem Package `readr`: `locale = locale(encoding = "UTF-8")`
- Base-R Funktionen: `fileEncoding = "UTF-8"`

Wenn ihr die codierung eines Files *nicht* kennt, könnt wie folgt vorgehen: Anleitung [für Windows](https://stackoverflow.com/a/13464816/4139249), [für Mac](https://stackoverflow.com/a/2461193/4139249) und [für Linux](https://stackoverflow.com/a/805474/4139249). 
:::

```{r}
metadata <- read_delim("datasets/prepro/metadata.csv", delim = ";", locale = locale(encoding = "UTF-8"))
```

## Aufgabe 3

Nun wollen wir den Datensatz `wetter`mit den Informationen aus `metadata` anreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe, selektiere diese Spalten.

```{r}
metadata <- metadata[, c("stn", "Name", "x", "y", "Meereshoehe")]
```

## Aufgabe 4

Jetzt kann `metadata` mit dem Datensatz `wetter` verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir "joinen" können.

Nutze die Join-Möglichkeiten von `dplyr` (Hilfe via `?dplyr::join`)  um die Datensätze `wetter` und `metadata` zu verbinden.

```{r}
wetter <- left_join(wetter, metadata, by = "stn")

# Jointyp: Left-Join auf 'wetter', da uns nur die Stationen im Datensatz 'wetter' interessieren.
# Attribut: "stn"
```

## Aufgabe 5

Erstelle eine neue Spalte `month` welche den jeweiligen Monat (aus `time`) beinhaltet. Nutze dafür die Funktion `lubridate::month()`.

```{r}
wetter$month <- month(wetter$time)
```

## Aufgabe 6

Berechne mit der Spalte `month` die Durchschnittstemperatur pro Monat.

```{r}
mean(wetter$tre200h0[wetter$month == 1])
mean(wetter$tre200h0[wetter$month == 2])
mean(wetter$tre200h0[wetter$month == 3])

# usw. für alle 12 Monate
```
