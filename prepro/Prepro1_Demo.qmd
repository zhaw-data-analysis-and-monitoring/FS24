---
date: 2023-10-10
lesson: PrePro1
topic: Data Types
index: 1
knitr:
  opts_chunk:
    collapse: true
---

# Prepro 1: Demo

This demo's source code can also [be downloaded as an R Script](Prepro1_Demo.R) (right click â†’ *Save Target As..*)

### Data types

#### Numerics

There are two different `numeric` data types in R:

- `double`: floating-point number (e.g. 10.3, 7.3)
- `integer` (e.g. 10, 7)

##### Doubles

A floating point number is assigned to a variable as follows:

```{r}
x <- 10.3

x

typeof(x)
```

Either `<-` or `=` can be used. However, the latter does not work in all situations, and is also easily confused with `==`.

```{r}
y = 7.3
y
```

If the numeric data type is not explicitly assigned, R always uses `double`:

```{r}
z <- 42
typeof(z)
is.integer(z)
is.numeric(z)
is.double(z)
```

#### Integer

A number is only stored as an `integer` if it is explicitly defined as one (using `as.integer()` or `L`).

```{r}
a <- as.integer(z)
is.numeric(a)
is.integer(a)

c <- 8L
is.numeric(c)
is.integer(c)
```

```{r}
typeof(a)

is.numeric(a)
is.integer(a)
```

#### Logical queries

Also known as a **Boolean**.

```{r}
e <- 3
f <- 6

e > f


sunny <- TRUE
dry <- FALSE

sunny & !dry
```

#### Character

**Character** strings contain text.

```{r}
s <- as.character(3.14)
s
typeof(s)
```

Connecting / concatenating character strings

```{r}
fname <- "Andrea"
lname <- "Muster"
paste(fname, lname)

fname2 <- "Simon"
fname == fname2
```

#### Factors

Factors in R denote a collection of repeating character strings, e.g. weekdays (there are only 7 different values for "weekdays").

```{r}
weekdays <- c("Thursday", "Friday", "Saturday")

typeof(weekdays)

weekdays_fac <- as.factor(weekdays)

weekdays
weekdays_fac
```

As shown in the above example, the main difference between `character vectors` and character `factors` is that factors also have `levels`. These `levels` correspond to the unique values.

By default, the order of the days is alphabetical. However, a specific order can be set using `ordered = T`, with the desired order defined in `levels =` [^ordered].

[^ordered]: `ordered = T` can only be specified for the `factor()` function, not for `as.factor()`. Otherwise, `factor()` and `as.factor()` are very similar.

```{r}
factor(weekdays, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), ordered = TRUE)
```

Note that there is a `<` sign between the levels!

#### Time/Date

R requires time/date data types to be read in `POSIXct` format. It should be noted that date and time are always stored **together** in R (in *one object* or *one* vector), unlike in other programs, such as Excel, where these items can be stored separately.

```{r}
date <- "2017-10-01 13:45:10"

# converts character to POSIXct:
as.POSIXct(date)
```

If the character string is delivered in the above format (`year-month-day hour:minute:second`), `as.POSIXct` needs no further information.

However, if the format is different, the function must be provided with the exact format. The  syntax for the function can be found in`?strptime`.

```{r}
date <- "01.10.2017 13:45"

# converts character to POSIXct:
as.POSIXct(date, format = "%d.%m.%Y %H:%M")

date2 <- as.POSIXct(date, format = "%d.%m.%Y %H:%M")
```

You can see in the above example that R has automatically set the time zone (`CEST`) to the **system time zone** (`Sys.timezone ()`).

Theoretically, the same code can also be used to extract specific components from a date.

```{r}
strftime(date2, format = "%m") # extracts the month as a number
strftime(date2, format = "%b") # extracts the month by name (abbreviated)
strftime(date2, format = "%B") # extracts the month by name (full)
```

However, the functions from lubridate are simpler to use:

```{r}
library("lubridate")

month(date2) # extracts the month as a number
month(date2, label = TRUE, abbr = TRUE) # extracts the month by name (abbreviated)
month(date2, label = TRUE, abbr = FALSE) # extracts the month by name (full)
```

### Vectors

Using `c()`, a set of values of the same data type can be assigned to a variable (as a `vector`).

```{r}
vec <- c(10, 20, 33, 42, 54, 66, 77)
vec
vec[5]
vec[2:4]

vec2 <- vec[2:4]
```

### Lists

A `list` is a collection of objects that do not need to be the same data type.

```{r}
mylist <- list("q", TRUE, 3.14)
```

The individual elements in a list can also be assigned names.

```{r}
mylist2 <- list(fav_letter = "q", fav_boolean = TRUE, fav_number = 3.14)

mylist2
```

### Data frames and convenience variables

If each entry in a list is the same length, this list can also be represented as a table or frame. Ideally, the names of the columns in the frame should also be defined.

```{r}
as.data.frame(mylist2)
```

The `data.frame` function allows a table to be created without first having to create a list.

```{r}
df <- data.frame(
  City = c("Zurich", "Geneva", "Basel", "Bern", "Lausanne"),
  Arrival = c(
    "1.1.2017 10:00", "1.1.2017 14:00",
    "1.1.2017 13:00", "1.1.2017 18:00", "1.1.2017 21:00"
  )
)

str(df)
```

The `$` symbol can be used to query data:

```{r}
df$City
```

New columns can be added and existing ones can be changed:

```{r}
df$Residents <- c(400000, 200000, 175000, 14000, 130000)

df$Residents <- as.integer(df$Residents)
```

In the `data.frame` above, the `Residents` column has been saved as a floating-point number. While this is not a problem, since we know that these are integers, we can change the data type. It is more important, however, that we convert the `Arrival` time (Arrivalcolumn) from a `factor` to a time format (`POSIXct`).

```{r}
df$Arrival <- as.POSIXct(df$Arrival, format = "%d.%m.%Y %H:%M")

df$Arrival
```

These columns can now help to create **convenience variables**. E.g., the arrival time can be derived from the `Arrival` column.

```{r}
df$Arrival_hour <- hour(df$Arrival)

df$Arrival_hour
```

We can also divide the cities into large, medium and small.

```{r}
df$Size <- "no information"

df$Size[df$Residents > 300000] <- "large"
df$Size[df$Residents <= 300000 & df$Residents > 150000] <- "medium"
df$Size[df$Residents <= 150000] <- "small"

df$Size
```

```{r}
#| purl: false
#| echo: false
#| output: false

knitr::purl("prepro/Prepro1_Demo.qmd", "prepro/Prepro1_Demo.R", documentation = 0)
```
