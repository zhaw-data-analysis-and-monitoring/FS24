---
date: 2023-10-17
lesson: PrePro3
topic: Split-Apply-Combine
index: 1
knitr:
  opts_chunk:
    collapse: true
execute:
  echo: true
---

# Prepro 3: Demo

In this demo, we will introduce other tools from the Tidyverse and explain them using examples. The tidyverse tools make dealing with data much easier and have now become a must have when dealing with data in R.

We cannot show you all the possibilities of tidyverse. Therefore, we will focus on the most important components and also introduce additional functionalities that we often use but may not yet be known to you. If you want to delve deeper into the topic, you should read @wickham2017. An extensive, although not comprehensive version is available online^[ http://r4ds.had.co.nz/], and the full eBook can be obtained from the library ^[ https://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093].

We will need the following packages:

```{r}
library("dplyr")
library("tidyr")
library("lubridate")
library("readr")
library("ggplot2")
```

## Split Apply Combine

### Load data

Lets load the weather data (source MeteoSchweiz) from the last exercise.

```{r}
weather <- read_delim("datasets/prepro/weather.csv", ",")

weather <- weather |>
  mutate(
    stn = as.factor(stn),
    time = as.POSIXct(as.character(time), format = "%Y%m%d%H")
  )
```

### Calculate values

We would like to calculate the average of all measured temperature values. To do this, we could use the following command:

```{r}
mean(weather$tre200h0, na.rm = TRUE)
```

The option `na.rm = T` means that NA values should be excluded from the calculation.

Various values can be calculated using the same approach (e.g. the maximum (`max()`), minimum (`min()`), median (`median()`) and much more).

This approach only works well if we want to calculate values across *all* observations for a variable (column). As soon as we want to group the observations, it becomes difficult. For example, if we want to calculate the average temperature *per month*.

### Convenience Variables

To solve this task, the month must first be extracted (the month is the *convenience variable*). For this we need the `lubridate::month()` function.

Now the month **convenience variable** can be created. Without using `dpylr`, a new column can be added as follows:

```{r}
weather$month <- month(weather$time)
```

With `dplyr` (see ^[ @wickham2017, Chapter 10 /http://r4ds.had.co.nz/transform.html]), the same command looks like this:

```{r}
weather <- mutate(weather, month = month(time))
```

The main advantage of `dplyr` is not yet apparent at this point. However, this will become clear later.

### Calculate values from groups

To calculate the average value per month with base R, you can first create a subset with `[]` and calculate the average value as follows:

```{r}
mean(weather$tre200h0[weather$month == 1], na.rm = TRUE)
```

We have to repeat this every month, which of course is very cumbersome. That is why we use the `dplyr` package. This, allows us to complete the task (calculate temperature means per month) as follows:

```{r}
summarise(group_by(weather, month), temp_average = mean(tre200h0, na.rm = TRUE))
```

### Concatenate vs. Nest

Translated into English, the above operation is as follows:

1) Take the `weather` dataset
2) Form groups per year  (`group_by(weather, year)`)
3) Calculate the mean temperature (`mean(tre200h0)`)

The translation from `R` -> English looks different because we read the operation in a *concatenated form* in English (operation 1->2->3) while the computer reads it as a *nested* operation 3(2(1)). To make `R` closer to English, you can use the `|>` operator (see ^[ @wickham2017, Chapter 14 / http://r4ds.had.co.nz/pipes.html]).

```{r}
#| eval: false

# 1 take the dataset "weather"
# 2 form groups per month
# 3 calculate the average temperature

summarise(group_by(weather, month), temp_average = mean(tre200h0))
#                  \__1__/
#         \___________2__________/
# \___________________3________________________________________/

# becomes:

weather |>                                 # 1
  group_by(month) |>                       # 2
  summarise(temp_average = mean(tre200h0)) # 3
```

This concatenation by means of `|>` (called pipe) makes the code a lot easier to write and read, and we will use it in the following exercises. Pipe is provided as part of the `magrittr` package and installed with `dplyr`.

There are several online tutorials about `dplyr` (see^[@wickham2017, Chapter 10 / http://r4ds.had.co.nz/transform.html, or [Hands-on dplyr tutorial..](https://youtu.be/jWjqLW-u3hc)]). Therefore, we will not explain all of these tools in full detail. Instead we will just focus on the important differences for two main functions in `dpylr`: `mutate()` and `summarise()`.

- `summarise()` summarises a data set. The number of observations (rows) is reduced to the number of groups (e.g., one summarised observation (row) per year). In addition, the number of variables (columns) is reduced to those specified in the "summarise" function (e.g., `temp_mean`).
- `mutate` adds *additional* variables (columns) to a `data.frame` (see example below).

```{r}
#| eval: !expr T
# Maximum and minimum temperature per calendar week
weather_summary <- weather |>               # 1) take the dataset "weather"
  filter(month == 1) |>                     # 2) filter for the month of January
  mutate(day = day(time)) |>                # 3) create a new column "day"
  group_by(day) |>                          # 4) Use the new column to form groups
  summarise(
    temp_max = max(tre200h0, na.rm = TRUE), # 5) Calculate the maximum
    temp_min = min(tre200h0, na.rm = TRUE)  # 6) Calculate the minimum
  )

weather_summary
```

## Reshaping data

### Wide → long

Tables can be transformed from *wide* to* long* using `tidyr` (see ^[ https://r4ds.had.co.nz/tidy-data.html#pivoting]). This package also works perfectly with piping (`|>`).

```{r}
weather_summary |>
  pivot_longer(c(temp_max, temp_min))
```

In the `pivot_longer()` command, we have to define which columns should be summarised (in this case: `temp_max`, `temp_min`, `temp_mean`). Alternatively, we can specify which columns we do *not* want to summarise:

```{r}
weather_summary |>
  pivot_longer(-day)
```

If we want to set the names of new columns (instead of `name` and `value`), this can be achieved by using `names_to` or `values_to`:

```{r}
weather_summary_long <- weather_summary |>
  pivot_longer(-day, names_to = "MeasurementType", values_to = "MeasurementValue")
```

The first 6 lines of `weather_summary_long`:

```{r}
#| echo: false
#| purl: false

knitr::kable(head(weather_summary_long))
```

The first 6 lines of `weather_sry`:

```{r}
#| echo: false
#| purl: false

knitr::kable(head(weather_summary, 6))
```

Note: `weather_summary_long` comprises 62 observations (rows), which is twice as much as `weather_summary`, because we have combined two of the columns.

```{r}
nrow(weather_summary)
nrow(weather_summary_long)
```

Long tables are more practical in many situations. For example, visualising using `ggplot2` (you will learn about this package in the "InfoVis" block) is much easier with *long tables*.

```{r}
ggplot(weather_summary_long, aes(day, MeasurementValue, colour = MeasurementType)) +
  geom_line()
```

### Long → wide

The counterpart to `pivot_longer` is `pivot_wider`. This function allows us to convert a *long* table into a *wide* one. To do this, we must specify in `names_from` which column the new column names should be created from (`names_from`) and  which column the values should originate from (`values_from`):

```{r}
weather_summary_long |>
  pivot_wider(names_from = MeasurementType, values_from = MeasurementValue)
```

For comparison: We have to plot each column individually in `ggplot2` for a *wide* table. While this is not a problem when we are only working with a few variables, like here, with a high number this quickly becomes tedious.

```{r}
ggplot(weather_summary) +
  geom_line(aes(day, temp_max)) +
  geom_line(aes(day, temp_min))
```
