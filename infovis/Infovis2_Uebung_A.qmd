---
date: 2024-03-26
lesson: InfoVis2
topic: Advanced ggplot
index: 1
execute:
  echo: false   # set to true to show the sample solution
  output: false # set to true to show the sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true
---

# Infovis 2: Exercise A

For today’s exercise, you will need the dataset *temperature_2005.csv* ({{<var datasets.InfoVis2>}}). This dataset contains temperature readings from various weather stations, this time from the year 2005. The date is formatted in such a way that R (specifically `read_delim`) should correctly recognise it as `datetime` and read it as `POSIXct`.

```{r}
#| echo: true
#| code-fold: false

library("readr")
library("dplyr")
library("lubridate")
library("tidyr")
library("ggplot2")
```

```{r}
#| echo: true
#| code-fold: false

temperature <- read_delim("datasets/infovis/temperature_2005.csv", ",")
```

## Task 1

Transform the *wide table* into a *long table* using the following code.

```{r}
#| echo: true
#| code-fold: false

temperature_long <- pivot_longer(
  data = temperature, 
  cols = -time, 
  names_to = "station", 
  values_to = "temperature"
  )

head(temperature_long)

```



Next, import the dataset *temperature_2005_metadata.csv* and join the two datasets with a `left_join` via `station` (or `stn`).

```{r}
metadata <- read_delim("datasets/infovis/temperature_2005_metadata.csv", ",")

temperature_long <- left_join(temperature_long, metadata, by = c(station = "stn"))
```

## Task 2

Create a scatter plot (`time` vs. `temperature`) where the points are coloured based on their sea level. Lower values should be coloured blue and higher values red (`scale_colour_gradient`). 

Tipp: Reduce the size of the points to avoid excessive over-plotting of the points (`size =`). 

```{r}
#| output: true

# Sample Solution
ggplot(temperature_long, aes(time, temperature, colour = Meereshoehe)) +
  geom_point(size = 0.5) +
  labs(x = "", y = "Temperature in ° Celsius") +
  scale_colour_gradient(low = "blue", high = "red")
```

## Task 3

Create an additional `Date` variable with the date of the respective measurement (with `as.Date()`). Use this column to calculate the average daily temperature at each weather station (with `summarise()`).

To keep the metadata (`Name`, `Meereshoehe`, `x`, `y`), you can perform the join from the first exercise again. Alternatively (faster but also more advanced), you can use these variables within your `group_by`.

```{r}
temperature_long <- temperature_long |>
  mutate(time = as.Date(time)) |>
  group_by(time, station, Name, Meereshoehe, x, y) |>
  summarise(temperature = mean(temperature))
```

## Task 4

Now repeat the plot from the first task with the aggregated data from the previous task. To set the labels correctly, you need to replace `scale_x_datetime` with `scale_x_date`.

```{r}
#| output: true

p <- ggplot(temperature_long, aes(time, temperature, colour = Meereshoehe)) +
  geom_point(size = 0.5) +
  labs(x = "", y = "Temperature in ° Celsius") +
  scale_x_date(date_breaks = "3 months", date_labels = "%b") +
  scale_color_gradient(low = "blue", high = "red")
p
```

## Task 5

Add a black, dashed trend line to the plot above (`geom_smooth()`).

```{r}
#| output: true

# Musterlösung
p <- p +
  stat_smooth(colour = "black", lty = 2)
p
```

## Task 6

Position the legend above the plot (use `theme()` with `legend.position`).

```{r}
#| output: true

# Sample Solution
p <- p +
  theme(legend.position = "top")
p
```


## Task 7

Now, let's move away from the scatter plot and create a box plot with the temperature data. Colour the box plots again depending on the sea level.

- Note the difference between `colour =` and `fill =`
- Note the difference between `facet_wrap()` and `facet_grid()`
- Remember,` facet_grid()` requires a period (`.`) next to the tilde (`~`).

- Note the difference between "`.~`" and "`~.`" in `facet_grid()`
- Adjust the position of the legend as needed

```{r}
#| output: true

# Sample solution
temperature_long <- mutate(temperature_long, month = month(time, label = T, abbr = F))

ggplot(temperature_long, aes(month, temperature, fill = Meereshoehe)) +
  geom_boxplot() +
  labs(x = "Station", y = "Temperature") +
  facet_wrap(~station) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

## Task 8

As a final important plot type, let’s complete two exercises with histograms. First, create a histogram `geom_histogram()` with the temperature values, then allocate the weather stations to different altitude levels (Low altitude [[< 400 m]], Mid altitude [[400 - 600 m]] and High altitude [[> 600 m]]). Finally, compare the distribution of temperature values at the different altitudes using a histogram.

Tip: Use `cut` to divide the stations into the three groups

```{r}
#| output: true

# Sample Solution
temperature_long <- temperature_long |>
  mutate(elevation = cut(Meereshoehe, c(0, 400, 600, 1000), labels = c("Low Altitude", "Mid Altitude", "High Altitude")))

ggplot(temperature_long, aes(temperature)) +
  geom_histogram() +
  facet_grid(~elevation) +
  labs(x = "Elevation", y = "Temperature") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
