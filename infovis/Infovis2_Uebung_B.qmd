---
date: 2024-03-26
lesson: InfoVis2
topic: Advanced ggplot
index: 2
execute:
  echo: false   # set to true to show the sample solution
  output: false # set to true to show the sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true
---

# Infovis 2: Exercise B (Optional)

In this exercise, we’ll recreate some of the more advanced or specialised plots from the lecture. For this purpose, we’ll use datasets that are already integrated into R. You can find a list of these datasets [here](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) or with the help `?datasets`.

We’ll continue to use `ggplot2`, but with a few tricks.

```{r}
#| echo: true
#| code-fold: false

library("dplyr")
library("tidyr")
library("ggplot2")
```

## Task 1: Parallel Coordinate Plots

Create a [parallel coordinate plot](https://en.wikipedia.org/wiki/Parallel_coordinates). For this, the integrated dataset [`mtcars`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html) is suitable. Extract the vehicle names with `rownames_to_column`.

Also, the values need to be normalised to a common scale. For this, you can use the function `scales::rescale`.

```{r}
mtcars2 <- mtcars |>
  tibble::rownames_to_column("car") |>
  pivot_longer(-car)

mtcars2 <- mtcars2 |>
  group_by(name) |>
  mutate(value_scaled = scales::rescale(value))
```

```{r}
#| echo: false
#| purl: false

knitr::kable(head(mtcars))
```

Here’s what the finished plot looks like:

```{r}
#| output: true

mtcars2 <- mtcars2 |>
  group_by(car) |>
  mutate(gear = value[name == "gear"])

ggplot(mtcars2, aes(name, value_scaled, group = car, colour = factor(gear))) +
  geom_point() +
  geom_line() +
  theme_minimal() +
  theme(legend.position = "none", axis.title.y = element_blank())
```

## Task 2: Polar Plot with Beaver Data

Polar plots are suitable for data of a cyclical nature, such as time-stamped data (daily, weekly, or annual rhythms). From the example datasets, I found two datasets that are time-stamped:

- [`beaver1` and `beaver2`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/beavers.html)
- [`AirPassenger`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html)

Both datasets need to be reshaped a bit before we can use them for a radial plot. In task 2, we'll use the beaver datasets, and in task 3 we'll use the passenger datasets.

If we want to use the data from both beavers, we need to merge them.

```{r}
beaver1_new <- beaver1 |>
  mutate(beaver = "nr1")

beaver2_new <- beaver2 |>
  mutate(beaver = "nr2")

beaver_new <- rbind(beaver1_new, beaver2_new)
```

We also need to make some adjustments to the time data. According to the [dataset’s description](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/beavers.html), time has been recorded in a format that isn’t very intuitive for programming purposes. For instance, 3:30 has been recorded as “0330”. To make this data more manageable, we’ll need to convert this time format into a decimal system.

```{r}
beaver_new <- beaver_new |>
  mutate(
    hour_dec = (time / 100) %/% 1, # Whole hours (using whole number division)
    min_dec = (time / 100) %% 1 / 0.6, # Decimal minutes (15 min becomes 0.25, via modulo)
    hour_min_dec = hour_dec + min_dec # Decimal time (03:30 becomes 3.5)
  )
```

Here’s what the finished plot should look like:

```{r}
#| output: true

# Task 2 Sample Solution

beaver_new |>
  ggplot(aes(hour_min_dec, temp, colour = beaver)) +
  geom_point() +
  scale_x_continuous(breaks = seq(0, 23, 2)) +
  coord_polar() +
  theme_minimal() +
  theme(axis.title = element_blank())
```

## Task 3: Grid Visualisation with Air Passengers

Similar to task 2, this time we’ll use the [`AirPassengers`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html) dataset.

The `AirPassengers` dataset is in a unique format. At first glance, it might seem like a `data.frame` or a `matrix`. However, it’s actually a [`ts`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/ts.html) class object

```{r}
AirPassengers

class(AirPassengers)
```

To use this dataset, we first need to convert it into a `matrix`. I learned how to do this [here](https://stackoverflow.com/a/5332664/4139249).

```{r}
AirPassengers2 <- tapply(AirPassengers, list(year = floor(time(AirPassengers)), month = month.abb[cycle(AirPassengers)]), c)

AirPassengers2
```

We also need to convert the `matrix` into a dataframe, and to transform the wide table into a long table.

```{r}
AirPassengers3 <- AirPassengers2 |>
  as.data.frame() |>
  tibble::rownames_to_column("year") |>
  pivot_longer(-year, names_to = "month", values_to = "n") |>
  mutate(
    # I use a simple trick to convert spelled-out months into numbers
    month = factor(month, levels = month.abb, ordered = T),
    month_numb = as.integer(month),
    year = as.integer(year)
  )
```

Here’s what the finished plot looks like:

```{r}
#| output: true

ggplot(AirPassengers3, aes(month, year, fill = n)) +
  geom_raster() +
  scale_y_reverse() +
  scale_fill_viridis_c(guide = guide_colourbar(barwidth = 15, title.position = "top")) +
  theme_minimal() +
  labs(fill = "Number of Passengers") +
  coord_equal() +
  theme(axis.title = element_blank(), legend.position = "bottom")
```
