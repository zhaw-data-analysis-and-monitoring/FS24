---
date: 2023-10-23
lesson: InfoVis1
thema: Plots & Facets
index: 3
execute: 
  echo: true   # set to true to show musterlösung
  output: true
code-fold: true
code-summary: "Musterlösung"
knitr:
  opts_chunk: 
    collapse: true
---

# Infovis 1: Übung

In dieser Übung geht es darum, die Grafiken aus dem Blog-post @kovic2014 zu rekonstruieren. Der urspüngliche Blogpost ist nicht mehr verfügbar, wir haben deshalb eine Kopie auf folgender Website gehostet: 

<https://researchmethods-zhaw.github.io/blog.tagesanzeiger.ch/>

Schau dir die Grafiken in dem Blogpost durch. Freundlicherweise wurden im Blogbeitrag die `ggplot2` Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht. Die Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen. 

Importiere als erstes den Datensatz *tagi_data_kanton.csv*.

```{r}
#| echo: true
#| code-fold: false

library("dplyr")
library("ggplot2")
library("readr")

kanton <- read_delim("datasets/infovis/tagi_data_kantone.csv", ",")
```

## Aufgabe 1

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_kanton.csv Datensatz:

Tipp:

- Nutze `ggplot(kanton, aes(auslanderanteil, ja_anteil))` um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (`geom_point()`)
- Nutze `coord_fixed()` um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).
- Optional: 
  - Setze die Achsen Start- und Endwerte mittels `scale_y_continuous` bzw. `scale_x_continuous`.
  - Setze analog @kovic2014 die `breaks` (0.0, 0.1...0.7) manuell (innerhalb `scale_*_continuous`)
  - Nutze `labs()` für die Beschriftung der Achsen

```{r}
#| output: true

# Lösung zu Aufgabe 1

plot1 <- ggplot(kanton, aes(auslanderanteil, ja_anteil)) +
  geom_point() +
  coord_fixed(1) +
  scale_y_continuous(breaks = c(0, 0.1, 0.3, 0.5, 0.7), limits = c(0, 0.7)) +
  scale_x_continuous(breaks = c(0, 0.1, 0.3, 0.5, 0.7), limits = c(0, 0.7)) +
  labs(y = "Anteil Ja-Stimmen", x = "Ausländeranteil")

plot1
```

## Aufgabe 2

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot:

Tipp:

- Nutze `geom_smooth`

```{r}
#| output: true

# Lösung zu Aufgabe 2

plot1 +
  geom_smooth()
```

## Aufgabe 3

Importiere die Gemeindedaten *tagi_data_gemeinden.csv*.

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `geom_point()` 
- Nutze `labs()`
- Nutze `coord_fixed()` 

```{r}
#| output: true

# Lösung zu Aufgabe 3

gemeinde <- read_delim("datasets/infovis/tagi_data_gemeinden.csv", ",")

plot2 <- ggplot(gemeinde, aes(anteil_ausl, anteil_ja)) +
  geom_point() +
  labs(x = "Ausländeranteil", y = "Anteil Ja-Stimmen") +
  coord_fixed(1) +
  lims(x = c(0, 1), y = c(0, 1))

plot2
```

## Aufgabe 4

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `geom_smooth`

```{r}
#| output: true

# Lösung zu Aufgabe 4

plot2 +
  geom_smooth()
```

## Aufgabe 5

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `facet_wrap` um einen Plot pro Kanton darzustellen.

```{r}
#| output: true

# Lösung zu Aufgabe 5

plot3 <- plot2 +
  facet_wrap(~kanton)
plot3
```

## Aufgabe 6

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `geom_smooth`

```{r}
#| output: true

# Lösung zu Aufgabe 6

plot3 +
  geom_smooth()
```


## Aufgabe 7

Rekonstrukturieren folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `facet_wrap`

```{r}
#| output: true

# Lösung zu Aufgabe 7

plot4 <- plot2 +
  facet_wrap(~quantile)
plot4
```

## Aufgabe 8

Rekonstrukturiere folgenden Plot aus @kovic2014 mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:

Tipp:

- Nutze `geom_smooth`

```{r}
#| output: true

# Lösung zu Aufgabe 8

plot4 +
  geom_smooth()
```
