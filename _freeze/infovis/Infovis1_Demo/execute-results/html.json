{
  "hash": "2ed5e792c6c8de6ff68136c5c07b5bc7",
  "result": {
    "markdown": "---\ndate: 2023-10-23\nlesson: InfoVis1\ntopic: \"Plots & Facets\"\nindex: 1\n---\n\n\n# Infovis 1: Demo A\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"readr\")\nlibrary(\"lubridate\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"tidyr\")\n```\n:::\n\n\nIn this demonstration, we'll start by loading the dataset *temperature_SHA_ZER.csv*, a refined version of the data from our previous lessons, PrePro1 and PrePro2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can load the dataset directly from the provided URL\n# Alternatively, you can download the dataset to your local machine using this URL and then read it as you normally would. Here’s the command to read the dataset:\ntemperature <- read_delim(\"datasets/infovis/temperature_SHA_ZER.csv\", \",\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|time                | SHA|  ZER|\n|:-------------------|---:|----:|\n|2000-01-01 00:00:00 | 0.2| -8.8|\n|2000-01-01 01:00:00 | 0.3| -8.7|\n|2000-01-01 02:00:00 | 0.3| -9.0|\n|2000-01-01 03:00:00 | 0.3| -8.7|\n|2000-01-01 04:00:00 | 0.4| -8.5|\n|2000-01-01 05:00:00 | 0.5| -8.4|\n:::\n:::\n\n\n## Base-plot vs. ggplot\n\nWe can create a scatterplot in \"Base-R\" to compare dates and temperatures as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(temperature$time, temperature$SHA, type = \"l\", col = \"red\")\nlines(temperature$time, temperature$ZER, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIn `ggplot`, the approach is more nuanced. A plot begins with `ggplot()`. This command specifies the dataset (`data =`) and the variables within the dataset that influence the plot (`mapping = aes()`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataset: \"temperature\" | Influencing variables: \"time\" and \"temp\"\nggplot(data = temperature, mapping = aes(time, SHA))\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIn ggplot, *at least one* \"layer\" is required to represent data, such as `geom_point()` for scatterplots, using the + operator. Unlike \"piping\" (`|>`), a layer is added with `+`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = temperature, mapping = aes(time, SHA)) +\n  # Layer: \"geom_point\" corresponds to points in a scatterplot\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nSince inputs are expected in the order of `data = ` followed by `mapping =` in ggplot, we can omit these specifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature, aes(time, SHA)) +\n  geom_point()\n```\n:::\n\n\n## Long vs. wide\n\nAs mentioned in PrePro 2, `ggplot2` is designed for *long tables*. Therefore, we need to transform the wide table into a long format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temp\")\n```\n:::\n\n\nTo colour-code different weather stations, we define variables that will influence the graphic, which are incorporated in the `aes()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can also add additional layers with lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Labels\n\nNext, we'll refine our plot by adding axis labels and a title. Additionally, we've chosen to remove the points (`geom_point()`) as they don't align with my preferred visualisation style.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Time\",\n    y = \"Temperature in degrees C°\",\n    title = \"Temperature Data Switzerland\",\n    subtitle = \"2001 to 2002\",\n    colour = \"Station\"\n  )\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Split Apply Combine\n\nIn our plot, the hourly data points are too detailed for a two-year visualisation. Using the *Split Apply Combine* technique (covered in PrePro 3), we can adjust the data resolution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_day <- temperature_long |>\n  mutate(time = as.Date(time))\n\ntemperature_day\n## # A tibble: 35,088 × 3\n##    time       station  temp\n##    <date>     <chr>   <dbl>\n##  1 2000-01-01 SHA       0.2\n##  2 2000-01-01 ZER      -8.8\n##  3 2000-01-01 SHA       0.3\n##  4 2000-01-01 ZER      -8.7\n##  5 2000-01-01 SHA       0.3\n##  6 2000-01-01 ZER      -9  \n##  7 2000-01-01 SHA       0.3\n##  8 2000-01-01 ZER      -8.7\n##  9 2000-01-01 SHA       0.4\n## 10 2000-01-01 ZER      -8.5\n## # ℹ 35,078 more rows\n\ntemperature_day <- temperature_day |>\n  group_by(station, time) |>\n  summarise(temp = mean(temp))\n\ntemperature_day\n## # A tibble: 1,462 × 3\n## # Groups:   station [2]\n##    station time        temp\n##    <chr>   <date>     <dbl>\n##  1 SHA     2000-01-01  1.25\n##  2 SHA     2000-01-02  1.73\n##  3 SHA     2000-01-03  1.59\n##  4 SHA     2000-01-04  1.78\n##  5 SHA     2000-01-05  4.66\n##  6 SHA     2000-01-06  3.49\n##  7 SHA     2000-01-07  3.87\n##  8 SHA     2000-01-08  3.28\n##  9 SHA     2000-01-09  3.24\n## 10 SHA     2000-01-10  3.24\n## # ℹ 1,452 more rows\n```\n:::\n\n\n## Adjusting the X/Y Axes\n\nYou can also influence the x/y axes. You first have to determine what type of axis the plot has (in its default setting, `ggplot` automatically selects the axis type based on the nature of the data).\n\nFor our y-axis, which consists of numerical data, `ggplot` uses `scale_y_continuous()`. Other axis types can be found at [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/reference/#section-scales) (`scale_x_something` or `scale_y_something`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Time\",\n    y = \"Temperature in degrees C\",\n    title = \"Temperature Data Switzerland\",\n    subtitle = \"2001 to 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) # determine y-axis section\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThis can also be done for the x-axis. Our x-axis consists of date information. `ggplot` calls this: `scale_x_date()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Time\",\n    y = \"Temperature in degrees C\",\n    title = \"Temperature Data Switzerland\",\n    subtitle = \"2001 to 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  )\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Customising Themes \n\nThe `theme` function in `ggplot` allows us to alter the general layout of plots. For instance, `theme_classic()` changes the plot's style to a more traditional look, which is ideal for formal reports or publications. This theme can be applied either to individual plots or set as a default for all plots within a session.\n\nApplying to a single Plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  theme_classic()\n```\n:::\n\n\nGlobal setting (for all subsequent plots in the current session):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_classic())\n```\n:::\n\n\n## Facets / Small Multiples\n\nggplot also offers powerful functions for creating \"Small multiples\" using `facet_wrap()` (or `facet_grid()`, more on this later). These functions divide the main plot into smaller subplots based on a specified *variable*, denoted by the tilde symbol \"`~`\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Time\",\n    y = \"Temperature in °C\",\n    title = \"Temperature Data of Switzerland\",\n    subtitle = \"2001 to 2002\",\n    colour = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station)\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n`facet_wrap` can also be customised further, such as by setting the number of facets per row with `ncol = `.\n\nIn addition, since the station names are displayed above each facet, we no longer require the legend. This is achieved with `theme(legend.position=\"none\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Time\",\n    y = \"Temperature in °C\",\n    title = \"Temperature Data of Switzerland\",\n    subtitle = \"2001 to 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Storing and Exporting Plots\n\nLike `data.frames` and other objects, a complete ggplot plot can be stored in a variable. This is useful for exporting the plot (as PNG, JPG, etc.) or for progressively enhancing it, as shown in this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1)\n# At this point, theme(legend.position=\"none\") was removed\n```\n:::\n\n\nTo save the plot as a PNG file (without specifying \"plot = \", the last plot is simply saved):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"plot.png\", plot = p)\n```\n:::\n\n\nTo add a layer or option to an existing plot stored in a variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  theme(legend.position = \"none\")\n```\n:::\n\n\nAs is typical with R, the modification made to the plot is not automatically saved; it only shows the outcome of the change. To permanently incorporate this change into my plot stored in the variable, we need to overwrite the variable with the updated plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  theme(legend.position = \"none\")\n```\n:::\n\n\n## Smoothing\n\nThe `geom_smooth()` function in `ggplot` can add trend lines to scatter plots. It is possible to select the underlying statistical method that is applied, yet by default, for datasets with fewer than 1,000 observations, `ggplot` defaults to using the `stats::loess` method. For larger datasets, it switches to `mgcv::gam`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_smooth(colour = \"black\")\np\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Infovis1_Demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}