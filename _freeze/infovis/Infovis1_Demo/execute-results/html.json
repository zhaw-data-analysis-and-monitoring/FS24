{
  "hash": "254625db3e57ea6195a01fbe1ffddf69",
  "result": {
    "markdown": "---\ndate: 2023-10-23\nlesson: InfoVis1\nthema: \"Plots & Facets\"\nindex: 1\n---\n\n\n# Infovis 1: Demo A\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"readr\")\nlibrary(\"lubridate\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"tidyr\")\n```\n:::\n\n\nAls erstes laden wir den Datensatz *temperature_SHA_ZER.csv* ein. Es handelt sich dabei um eine leicht modifizierte Variante der Daten aus PrePro1 und PrePro2.\ntest\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wir können den Datensatz direkt über die URL einladen oder aber ihr nutzt die\n# URL um den Datensatz lokal bei euch abzuspeichern und wie gewohnt einzulesen\ntemperature <- read_delim(\"datasets/infovis/temperature_SHA_ZER.csv\", \",\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|time                | SHA|  ZER|\n|:-------------------|---:|----:|\n|2000-01-01 00:00:00 | 0.2| -8.8|\n|2000-01-01 01:00:00 | 0.3| -8.7|\n|2000-01-01 02:00:00 | 0.3| -9.0|\n|2000-01-01 03:00:00 | 0.3| -8.7|\n|2000-01-01 04:00:00 | 0.4| -8.5|\n|2000-01-01 05:00:00 | 0.5| -8.4|\n:::\n:::\n\n\n## Base-plot vs. ggplot\n\nUm in \"base-R\" einen Scatterplot zu erstellen wo Datum der Temperatur gegenübersteht, gehen wir wie folgt vor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(temperature$time, temperature$SHA, type = \"l\", col = \"red\")\nlines(temperature$time, temperature$ZER, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIn `ggplot` sieht das etwas anders und auf den ersten Blick etwas komplizierter aus: Ein plot wird durch den Befehl `ggplot()` initiiert. Hier wird einerseits der Datensatz festgelegt, auf dem der Plot beruht (`data = `), sowie die Variablen innerhalb des Datensatzes, die Einfluss auf den Plot ausüben (`mapping = aes()`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Datensatz: \"temperature\" | Beeinflussende Variabeln: \"time\" und \"temp\"\nggplot(data = temperature, mapping = aes(time, SHA))\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWeiter braucht es *mindestens* ein \"Layer\" der beschreibt, wie die Daten dargestellt werden sollen (z.B. `geom_point()`).\nAnders als bei \"Piping\" (`|>`) wird ein Layer mit `+` hinzugefügt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = temperature, mapping = aes(time, SHA)) +\n  # Layer: \"geom_point\" entspricht Punkten in einem Scatterplot\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nDa ggplot die Eingaben in der Reihenfolge `data = ` und dann `mapping = `erwartet, können wir diese Spezifizierungen auch weglassen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature, aes(time, SHA)) +\n  geom_point()\n```\n:::\n\n\n## Long vs. wide\n\nWie wir in PrePro 2 bereits erwähnt haben, ist `ggplot2` auf *long tables* ausgelegt. Wir überführen deshalb an dieser Stelle die breite in eine lange Tabelle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temp\")\n```\n:::\n\n\nNun wollen wir die unterschiedlichen Stationen unterschiedlich einfärben. Da wir Variablen definieren wollen, welche Einfluss auf die Grafik haben sollen, gehört diese Information in `aes()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWir können noch einen Layer mit Linien hinzufügen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Beschriftungen (labels)\n\nWeiter können wir die Achsen beschriften und einen Titel hinzufügen. Zudem lasse ich die Punkte (`geom_point()`) nun weg, da mir diese nicht gefallen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  )\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Split Apply Combine\n\nIm obigen Plot fällt auf, dass stündliche Werte eine zu hohe Auflösung ist, wenn wir daten über 2 Jahre visualisieren. Mit *Split Apply Combine* (PrePro 3) können wir die Auflösung unserer Daten verändern: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_day <- temperature_long |>\n  mutate(time = as.Date(time))\n\ntemperature_day\n## # A tibble: 35,088 × 3\n##    time       station  temp\n##    <date>     <chr>   <dbl>\n##  1 2000-01-01 SHA       0.2\n##  2 2000-01-01 ZER      -8.8\n##  3 2000-01-01 SHA       0.3\n##  4 2000-01-01 ZER      -8.7\n##  5 2000-01-01 SHA       0.3\n##  6 2000-01-01 ZER      -9  \n##  7 2000-01-01 SHA       0.3\n##  8 2000-01-01 ZER      -8.7\n##  9 2000-01-01 SHA       0.4\n## 10 2000-01-01 ZER      -8.5\n## # ℹ 35,078 more rows\n\ntemperature_day <- temperature_day |>\n  group_by(station, time) |>\n  summarise(temp = mean(temp))\n\ntemperature_day\n## # A tibble: 1,462 × 3\n## # Groups:   station [2]\n##    station time        temp\n##    <chr>   <date>     <dbl>\n##  1 SHA     2000-01-01  1.25\n##  2 SHA     2000-01-02  1.73\n##  3 SHA     2000-01-03  1.59\n##  4 SHA     2000-01-04  1.78\n##  5 SHA     2000-01-05  4.66\n##  6 SHA     2000-01-06  3.49\n##  7 SHA     2000-01-07  3.87\n##  8 SHA     2000-01-08  3.28\n##  9 SHA     2000-01-09  3.24\n## 10 SHA     2000-01-10  3.24\n## # ℹ 1,452 more rows\n```\n:::\n\n\n## X/Y-Achse anpassen\n\nMan kann auch Einfluss auf die x-/y-Achsen nehmen. Dabei muss man zuerst festlegen, was für ein Achsentyp der Plot hat (vorher hat `ggplot` eine Annahme auf der Basis der Daten getroffen). \n\nBei unserer y-Achse handelt es sich um numerische Daten, `ggplot` nennt diese: `scale_y_continuous()`. Unter [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/reference/#section-scales) findet man noch andere x/y-Achsentypen (`scale_x_irgenwas` bzw. `scale_y_irgendwas`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) # y-Achsenabschnitt bestimmen\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nDas gleiche Spiel kann man für die y-Achse betreiben. Bei unserer y-Achse handelt es sich ja um Datumsangaben. `ggplot` nennt diese: `scale_x_date()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  )\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Themes\n\nMit `theme` verändert man das allgmeine Layout der Plots. Beispielsweise kann man mit `theme_classic()` `ggplot`-Grafiken etwas weniger \"Poppig\" erscheinen lassen: so sind sie besser für Bachelor- / Masterarbeiten sowie Publikationen geeignet. `theme_classic()` kann man indiviudell pro Plot anwenden, oder für die aktuelle Session global setzen (s.u.)\n\nIndividuell pro Plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  theme_classic()\n```\n:::\n\n\nGlobal (für alle nachfolgenden Plots der aktuellen Session):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_classic())\n```\n:::\n\n\n## Facets / Small Multiples\n\nSehr praktisch sind auch die Funktionen für \"Small multiples\". Dies erreicht man mit `facet_wrap()` (oder `facet_grid()`, mehr dazu später). Man muss mit einem Tilde-Symbol \"`~`\" nur festlegen, welche *Variable* für das Aufteilen des Plots in kleinere Subplots verantwortlich sein soll. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(station ~ .)\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nAuch `facet_wrap` kann man auf seine Bedürfnisse anpassen: Beispielweise kann man mit `ncol = ` die Anzahl facets pro Zeile bestimmen. \n\nZudem brauchen wir die Legende nicht mehr, da der Stationsnamen über jedem Facet steht. Ich setze deshalb `theme(legend.position=\"none\")` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## In Variabel abspeichern und Exportieren\n\nGenau wie `data.frames` und andere Objekte, kann man einen ganzen Plot auch in einer Variabel speichern. Dies kann nützlich sein um einen Plot zu exportieren (als png, jpg usw.) oder sukzessive erweitern wie in diesem Beispiel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1)\n# ich habe an dieser Stelle theme(legend.position=\"none\") entfernt\n```\n:::\n\n\nFolgendermassen kann ich den Plot als png-File abspeichern (ohne Angabe von \"plot = \" wird einfach der letzte Plot gespeichert)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"plot.png\", plot = p)\n```\n:::\n\n\n.. und so kann ich einen bestehenden Plot (in einer Variabel) mit einem Layer / einer Option erweitern\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  theme(legend.position = \"none\")\n```\n:::\n\n\nWie üblich wurde diese Änderung nicht gespeichert, sondern nur das Resultat davon ausgeben. Wenn die Änderung in meinem Plot (in der Variabel) abspeichern will, muss ich die Variabel überschreiben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  theme(legend.position = \"none\")\n```\n:::\n\n\n## Smoothing\n\nMit `geom_smooth()` kann `ggplot` eine Trendlinie auf der Baiss von Punktdaten berechnen. Die zugrunde liegende statistische Methode kann selbst gewählt werden (ohne Angabe verwendet `ggplot` bei < 1'000 Messungen `stats::loess`, ansonsten `mgcv::gam`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_smooth(colour = \"black\")\np\n```\n\n::: {.cell-output-display}\n![](Infovis1_Demo_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Infovis1_Demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}