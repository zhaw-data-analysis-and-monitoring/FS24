{
  "hash": "42d9bba7dd68ad904b5f24411079c6f0",
  "result": {
    "markdown": "---\ndate: 2023-10-24\nlesson: InfoVis2\nthema: Vertiefung ggplot\nindex: 1\nexecute: \n  echo: true   # set to true to show musterlösung\n  output: true\ncode-fold: true\ncode-summary: \"Musterlösung\"\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n# Infovis 2: Übung A\n\nFür die heutige Übung brauchst du den Datensatz *temperature_2005.csv*. Dabei handelt es sich wieder um Teperaturwerte verschiedener Stationen, diesmal aus dem Jahr 2005. Das Datum ist so formatiert, dass `R` (isbesondere `read_csv`) es korrekt als `datetime` erkennen und als `POSIXct` einlesen sollte.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"readr\")\nlibrary(\"dplyr\")\nlibrary(\"lubridate\")\nlibrary(\"tidyr\")\nlibrary(\"ggplot2\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntemperature <- read_delim(\"datasets/infovis/temperature_2005.csv\", \",\")\n```\n:::\n\n\n## Aufgabe 1\n\nMache aus der *wide table* eine *long table* die wie folgt aussieht. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temperature\")\n\nknitr::kable(head(temperature_long))\n```\n\n::: {.cell-output-display}\n|time       |station | temperature|\n|:----------|:-------|-----------:|\n|2005-01-01 |ALT     |         1.3|\n|2005-01-01 |BUS     |         1.5|\n|2005-01-01 |GVE     |         1.1|\n|2005-01-01 |INT     |         0.2|\n|2005-01-01 |OTL     |         2.2|\n|2005-01-01 |LUG     |         1.7|\n:::\n:::\n\n\nImportiere anschliessend den Datensatz *temperature_2005_metadata.csv* und verbinde die beiden Datensätze mit einem `left_join` via `station` (bzw. `stn`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetadata <- read_delim(\"datasets/infovis/temperature_2005_metadata.csv\", \",\")\n\ntemperature_long <- left_join(temperature_long, metadata, by = c(station = \"stn\"))\n```\n:::\n\n\n## Aufgabe 2\n\nErstelle ein Scatterplot (`time` vs. `temperature`) wobei die Punkte aufgrund ihrer Meereshöhe eingefärbt werden sollen. Tiefe Werte sollen dabei blau eingefärbt werden und hohe Werte rot (`scale_color_gradient`). Verkleinere die Punkte um übermässiges Überplotten der Punkten zu vermeiden (`size =`). Weiter sollen auf der x-Achse im Abstand von 3 Monaten der jeweilige Monat vermerkt sein (`date_breaks` bzw. `date_labels` von `scale_x_datetime()`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\nggplot(temperature_long, aes(time, temperature, color = Meereshoehe)) +\n  geom_point(size = 0.5) +\n  labs(x = \"\", y = \"Temperatur in ° Celsius\") +\n  scale_x_datetime(date_breaks = \"3 months\", date_labels = \"%b\") +\n  scale_color_gradient(low = \"blue\", high = \"red\")\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 3\n\nErstelle eine Zusatzvariabel `Date` mit dem Datum der jeweiligen Messung ( mit `as.Date`). Nutze diese Spalte um die Tagesmitteltemperatur pro Station zu berechnen (mit `summarise()`). \n\nUm die Metadaten  (`Name`, `Meereshoehe`, `x`, `y`) nicht zu verlieren kannst du den Join aus der ersten Übung wieder ausführen. Alternativ (schneller aber auch schwerer zu verstehen) kannst du diese Variabeln innerhalb deines `group_by` verwenden.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature_long <- temperature_long |>\n  mutate(time = as.Date(time)) |>\n  group_by(time, station, Name, Meereshoehe, x, y) |>\n  summarise(temperature = mean(temperature))\n```\n:::\n\n\n## Aufgabe 4\n\nWiederhole nun den Plot aus der ersten Aufgabe mit den aggregierten Daten aus der vorherigen Aufgabe. Um die labels korrekt zu setzen musst du `scale_x_datetime` mit `scale_x_date` ersetzen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(temperature_long, aes(time, temperature, color = Meereshoehe)) +\n  geom_point(size = 0.5) +\n  labs(x = \"\", y = \"Temperatur in ° Celsius\") +\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\") +\n  scale_color_gradient(low = \"blue\", high = \"red\")\np\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 5\n\nFüge am obigen Plot eine schwarze, gestrichelte Trendlinie hinzu.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\np <- p +\n  stat_smooth(colour = \"black\", lty = 2)\np\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 6\n\nPositioniere die Legende oberhalb des Plots (nutze dazu `theme()` mit `legend.position`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\np <- p +\n  theme(legend.position = \"top\")\np\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 7 (optional, fortgeschritten)\n\nFüge den Temperaturwerten auf der y-Ache ein `°C` hinzu (siehe unten und studiere [diesen Tipp](https://stackoverflow.com/a/35967126/4139249) zur Hilfe). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\np <- p +\n  scale_y_continuous(labels = function(x) paste0(x, \"°C\")) +\n  labs(x = \"Kalenderwoche\", y = \"Temperatur\")\np\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 8\n\nJetzt verlassen wir den Scatterplot und machen einen Boxplot mit den Temperaturdaten. Färbe die Boxplots wieder in Abhängigkeit der Meereshöhe ein. \n\n- Beachte den Unterschied zwischen `colour =` und `fill =`\n- Beachte den Unterschied zwischen `facet_wrap()` und `facet_grid()`\n- `facet_grid()` braucht übrigens noch einen Punkt (`.`) zur Tilde (`~`). \n- Beachte den Unterschied zwischen \"`.~`\" und \"`~.`\" bei `facet_grid()`\n- verschiebe nach Bedarf die Legende\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\ntemperature_long <- mutate(temperature_long, monat = month(time, label = T, abbr = F))\n\nggplot(temperature_long, aes(monat, temperature, fill = Meereshoehe)) +\n  geom_boxplot() +\n  labs(x = \"Station\", y = \"Temperatur\") +\n  facet_wrap(~station) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 9\n\nAls letzter wichtiger Plottyp noch zwei Übungen zum Histogramm. Erstelle ein Histogramm `geom_histogram()` mit den Temperaturwerten. Teile dazu die  Stationen in verschiedene Höhenlagen ein (Tieflage [< 400 m], Mittellage [400 - 600 m] und Hochlage [> 600 m]). Vergleiche die Verteilung der Temperaturwerte in den verschiedenen Lagen mit einem Histogramm. \n\nTip: Nutze `cut` um die Stationen in die drei Gruppen aufzuteilen\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Musterlösung\ntemperature_long <- temperature_long |>\n  mutate(lage = cut(Meereshoehe, c(0, 400, 600, 1000), labels = c(\"Tieflage\", \"Mittellage\", \"Hochlage\")))\n\nggplot(temperature_long, aes(temperature)) +\n  geom_histogram() +\n  facet_grid(~lage) +\n  labs(x = \"Lage\", y = \"Temperatur\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Infovis2_Uebung_A_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Infovis2_Uebung_A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}