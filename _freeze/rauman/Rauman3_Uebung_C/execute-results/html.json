{
  "hash": "51b6425b0977a553468acea49b7f0e9c",
  "result": {
    "markdown": "---\ndate: 2023-12-04\nlesson: RaumAn3\nthema: G-Funktion\nindex: 3\nexecute: \n  echo: false   # set to true to show musterlösung\n  output: false # set to true to show musterlösung\ncode-fold: true\ncode-summary: \"Musterlösung\"\nknitr:\n  opts_chunk: \n    collapse: true  \n---\n\n\n# Rauman 3: Übung C (Optional)\n\nIn dieser optionalen Übung wollen wir die G-Function für Luftqualitäts-Messstellen und Rotmilan Bewegungen berechnen und vergleichen.\n\n## Aufgabe 1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\nrotmilan <- read_sf(\"datasets/rauman/rotmilan.gpkg\")\n\nschweiz <- read_sf(\"datasets/rauman/schweiz.gpkg\")\n\nluftqualitaet <- read_sf(\"datasets/rauman/luftqualitaet.gpkg\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Eine solche Visualisierung zeigt dir beispielsweise die räumliche Ausdehnung der Datenpunkte](Rauman3_Uebung_C_files/figure-html/fig-ggplot-ex1-1.png){#fig-ggplot-ex1 width=672}\n:::\n:::\n\n\n## Aufgabe 2\n\nAls erstes berechnen wir die G-Function für die Rotmilanpositionen:\n\n### Schritt 1\n\nMit `st_distance()` können Distanzen zwischen zwei `sf` Datensätze berechnet werden. Wird nur ein Datensatz angegeben, wird eine Kreuzmatrix erstellt wo die Distanzen zwischen allen Features zu allen anderen Features dargestellt werden. Wir nützen diese Funktion zur Berechnung der nächsten Nachbarn.\n\n\n::: {.cell}\n\n:::\n\n\n### Schritt 2\n\nNun wollen wir wissen, wie gross die *kürzeste* Distanz von jedem Punkt zu seinem nächsten Nachbarn beträgt, also die *kürzeste Distanz pro Zeile*. Bevor wir diese ermitteln müssen wir die diagonalen Werte noch entfernen, denn diese stellen ja jeweils die Distanz zu sich selber dar und sind immer `0`. Danach kann mit `apply()` eine Funktion (`FUN = min`) über die Zeilen (`MARGIN = 1`) einer Matrix (`X = rotmilan_distanzmatrix`) gerechnet werden. Zusätzlich müssen wir noch `na.rm = TRUE` setzen, damit `NA` Werte von der Berechnung ausgeschlossen werden. Das Resultat ist ein Vektor mit gleich vielen Werten wie Zeilen in der Matrix.\n\n\n::: {.cell}\n\n:::\n\n\n### Schritt 3\n\nNun müssen wir die Distanzen nach ihrer Grösse sortieren \n\n\n::: {.cell}\n\n:::\n\n\n### Schritt 4\n\nJetzt berechnen wir die kummulierte Häufigkeit von jeder Distanz berechnen. Die kummulierte Häufikgeit vom ersten Wert ist 1 (der Index des ersten Wertes) dividiert durch die Anzahl Werte insgesamt. Mit `seq_along` erhalten wir die Indizes aller Werte, mit `lenth` die Anzahl Werte insgesamt.\n\n\n::: {.cell}\n\n:::\n\n\n### Schritt 5\n\nNun wollen wir die kumulierte Häufigkeit der Werte in einer Verteilungsfunktion (engl: [Empirical Cumulative Distribution Function, ECDF](https://en.wikipedia.org/wiki/Empirical_distribution_function)) darstellen. Dafür müssen wir die beiden Vektoren zuerst noch in einen Dataframe packen, damit `ggplot` damit klar kommt. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_C_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLesehilfe:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_C_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 3\n\nFühre nun die gleichen Schritte mit `luftqualitaet` durch und vergleiche die ECDF-Plots. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_C_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Rauman3_Uebung_C_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}