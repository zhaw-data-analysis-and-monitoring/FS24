{
  "hash": "62fa6e029a27096651419d29b589e7a0",
  "result": {
    "markdown": "---\ndate: 2023-12-04\nlesson: RaumAn3\nthema: Dichteschätzung\nindex: 1\nexecute: \n  echo: false   # set to true to show musterlösung\n  output: false # set to true to show musterlösung\ncode-fold: true\ncode-summary: \"Musterlösung\"\nknitr:\n  opts_chunk: \n    collapse: true  \n---\n\n\n# Rauman 3: Übung A\n\nFür die heutige Übung benötigen wir folgende Datensätze. Importiere diese in R. Prüfe, ob das CRS korrekt gesetzt wurde, setze es wenn nötig. Mache dich mit den Daten vertraut (visualieren, durchscrollen usw).\n\n- *rotmilan.gpkg*: Dieser Datensatz stammt aus einem grösseren Forschungsprojekt der [Vogelwarte Sempach](https://www.vogelwarte.ch/de/projekte/oekologische-forschung/mechanismen-der-populationsdynamik-beim-rotmilan), welcher über die die Plattform [movebank](http://www.movebank.org/panel_embedded_movebank_webapp?gwt_fragment=page%3Dsearch_map_linked%2CindividualIds%3D676571254%2Clat%3D44.465151013519666%2Clon%3D9.096679687499508%2Cz%3D5) zur Verfügung gestellt wurde (siehe @scherler2020). Es handelt sich dabei um ein einzelnes Individuum, welches seit 2017 mit einem Sender versehen ist und über ganz Mitteleuropa zieht. Wir arbeiten in dieser Übung nur mit denjenigen Datenpunkten, die in der Schweiz erfasst wurden. Wer den ganzen Datensatz analysieren möchte, kann sich diesen über den Movebank-Link runterladen.\n- *luftqualitaet.gpkg*: Dieser Datensatz beinhaltet Messungen von Stickstoffdioxid $NO_2$ aus dem Jahr 2015 für 97 Messstellen in der Schweiz. Stickstoffdioxid entstehen beim Verbrennen von Brenn- und Treibstoffen, insbesondere bei hohen Verbrennungstemperaturen, wobei der Strassenverkehr als Hauptquelle gilt. \nMehr Informationen dazu findet ihr [hier](https://www.bafu.admin.ch/bafu/de/home/themen/thema-luft/luft--daten--indikatoren-und-karten/luft--indikatoren/indikator-luft.pt.html/aHR0cHM6Ly93d3cuaW5kaWthdG9yZW4uYWRtaW4uY2gvUHVibG/ljL0FlbURldGFpbD9pbmQ9TFUwMjAmbG5nPWRlJlN1Ymo9Tg%3d%3d.html).\n- *schweiz.gpkg*: Landesgrenze der Schweiz\n\nAls erstes wollen wir für die Datensätze `luftqualitaet` und `rotmilan` Dichteschätzungen durchführen. Lade vorgängig die dafür die notwendigen Packages in deine R-Session.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\nlibrary(\"spatstat.geom\")\nlibrary(\"spatstat.explore\")\n```\n:::\n\n\n\n\n## Aufgabe 1: Rotmilan Bewegungsdaten visualisieren\n\nDie erste Frage, die bei solchen Bewegungsstudien typischerweise gestellt wird, lautet: *Wo hält sich das Tier hauptsächlich auf?* Um diese Frage zu beantworten, kann man als erstes einfach die Datenpunkte in einer einfachen Karte visualisieren. Erstellt zur Beantwortung dieser Frage nachstehende Karte.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_A_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 2: Kernel Density Estimation berechnen\n\nIn einer ersten Annäherung funktioniert dies, doch wir sehen hier ein klassisches Problem des \"Overplotting\". Das heisst, dass wir durch die Überlagerung vieler Punkte in den dichten Regionen nicht abschätzen können, wie viele Punkte dort effektiv liegen und ggf. übereinander liegen. Es gibt hier verschiedene Möglichkeiten, die Punktdichte klarer zu visualisieren. Eine unter Biologen sehr beliebte Methode ist die Dichteverteilung mit einer Kernel Density Estimation (KDE). Dies v.a. darum, weil mit KDE das Habitat (Streifgebiet) eines Tieres abgeschätzt werden kann. Homeranges werden oft mit KDE95 und Core Areas mit KDE50 definiert ([Fleming C., Calabrese J., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12673)).\n\nFür die Berechnung der Density verwenden wir die Funktion `density.ppp` aus `spatstat`. Diese library ist etwas komplex in der Anwendung, damit wir dieses Verfahren aber dennoch auf unsere Rotmilan-Daten anwenden können, haben wir eine eigene KDE-Funktion erstellt, die wir Euch zur Verfügung stellen. \n\nWir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Funktion zu verzichten und stattdessen direkt `spatstat` zu verwenden. Wenn ihr mit unserer Funktion arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy_kde <- function(points, cellsize, bandwith, extent = NULL){\n  library(\"spatstat.geom\")    # um sf in ppp zu konvertieren\n  library(\"spatstat.explore\") # um die Dichte zu berechnen\n  \n  points_ppp <- as.ppp(points) # konvertiert sf > ppp\n\n  if(!is.null(extent)){\n    # falls ein extent angegeben ist, wird dieser verwendet\n    # um das \"Beobachtungsfenster\" zu setzen\n    Window(points_ppp) <- as.owin(st_bbox(extent))\n  } \n\n  # macht eine Dichteschätzung\n  points_density <- density.ppp(x = points_ppp, sigma = bandwith, eps = cellsize)\n\n  # konvertiert den Output in ein DataFrame\n  points_density_df <- as.data.frame(points_density)\n\n  points_density_df\n}\n```\n:::\n\n\nDie Parameter der Funktion sollten relativ klar sein:\n\n- `points`: Ein Punktdatensatz aus der Class `sf`\n- `cellsize`: Die Zellgrösse des output-Rasters\n- `bandwith`: Der Suchradius für die Dichteberechnung\n- `extent` (optional): Der Perimeter, in dem die Dichteverteilung berechnet werden soll. Wenn kein Perimeter angegeben wird, wird die \"bounding box\" von `points` genutzt.\n\nWenn wir nun mit `my_kde()` die Dichteverteilung berechnen, erhalten wir ein `data.frame` mit X und Y Koordinaten sowie eine Spalte `value` zurück. Nutzt diese drei Spalten mit `geom_raster()` um eure Daten mit `ggplot` zu visualisieren (`aes(x = X, y = Y, fill = value)`. \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrotmilan_kde <- my_kde(points = rotmilan, cellsize = 1000, bandwith = 10000, extent = schweiz)\n\nhead(rotmilan_kde)\n##         x       y        value\n## 1 2485909 1075767 5.632740e-24\n## 2 2485909 1076766 8.290197e-23\n## 3 2485909 1077764 3.032138e-23\n## 4 2485909 1078763 6.522508e-23\n## 5 2485909 1079761 9.599267e-23\n## 6 2485909 1080760 1.183168e-22\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_A_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nDie Kernel Density Estimation ist nun sehr stark von den tiefen Werten dominiert, da die Dichte in den meisten Zellen unseres Untersuchungsgebiets nahe bei Null liegt. Wie erwähnt sind Wissenschaftler häufig nur an den höchsten 95\\% der Werte interessiert. Folge folgende Schritte um das Resultat etwas besser zu verantschaulichen:\n\n1. Berechne die 95. Perzentile aller Werte mit der Funktion `quantile` und benne diesen `q95`\n2. Erstelle eine neue Spalte in `rotmilan_kde`, wo alle Werte tiefer als `q95` `NA` entsprechen\n3. (Optional): Transformiere die Werte mit log10, um einen differenzierteren Farbverlauf zu erhalten\n\nWir können die tiefen Werte ausblenden, indem wir nur die höchsten 5% der Werte darstellen. Dafür berechnen wir mit `raster::quantile` die 95. Perzentile aller Werte und nutzen diesen Wert als \"Grenzwert\" für die Darstellung.\n\nZusätzlich hilft eine logarithmische Transformation der Werte, die Farbskala etwas sichtbarer zu machen.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Rauman3_Uebung_A_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 3: Dichteverteilung mit Thiessen Polygonen\n\nThiessen Polygone bieten eine spannende Alternative um Unterschiede in der Dichteverteilung von Punktdatensätzen zu visualisieren. \nWir wollen dies nun ausprobieren und konstruieren zum Schluss die Thiessenpolygone für die Rotmilan-Daten für das Untersuchungsgebiet Schweiz. Nutze die Anleitung für das Erstellen von Thiessenpolygonen aus der Übung B um Thiessenpolygone für die Rotmilanpositionen zu erstellen. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Wenn wir jetzt die Thiessenpolygone (ohne Punkte) darstellen, wird deutlicher, wie die Dichteverteilung im Innern des Clusters aussieht. ](Rauman3_Uebung_A_files/figure-html/fig-ggplot-ex2-thiessen-1.png){#fig-ggplot-ex2-thiessen width=672}\n:::\n:::\n",
    "supporting": [
      "Rauman3_Uebung_A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}