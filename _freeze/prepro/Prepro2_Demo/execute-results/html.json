{
  "hash": "c515919445ed63971bb81bb3846b9673",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2024-02-27\nlesson: PrePro2\ntopic: Piping / Joins\nindex: 1\nknitr:\n  opts_chunk:\n    collapse: true\n---\n\n\n# Prepro 2: Demo\n\nThe code for this demo can also [be downloaded as an R Script](Prepro2_Demo.R) (right click → *Save Target As..*)\n\n## Piping\n\nWe want to extract the temperature data from a character string (`diary`), and then convert the Kelvin value into Celsius according to the following formula, before finally calculating the mean of all the values:\n\n$$°C = K - 273.15$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiary <- c(\n  \"The temperature is 310° Kelvin\",\n  \"The temperature is 322° Kelvin\",\n  \"The temperature is 410° Kelvin\"\n)\n\ndiary\n## [1] \"The temperature is 310° Kelvin\" \"The temperature is 322° Kelvin\"\n## [3] \"The temperature is 410° Kelvin\"\n```\n:::\n\n\nTo do this, we need the `substr()` function, which can extract part of a `character`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If the letters were individual _elements_ of a vector, we would subset them like this:\n\ncharvec1 <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\ncharvec1[4:6]\n## [1] \"d\" \"e\" \"f\"\n\n# But if these are stored in a single character, we need substr:\ncharvec2 <- \"abcdefgh\"\nsubstr(charvec2, 4, 6)\n## [1] \"def\"\n```\n:::\n\n\nWe also need the auxiliary subtraction function, `substract`, which accepts two values, the `minuend` and the `subtrahend`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubtract <- function(minuend, subtrahend) {\n  minuend - subtrahend\n}\n\nsubtract(10, 4)\n## [1] 6\n```\n:::\n\n\nTranslated into `R`-code, this results in the following operation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput <- mean(subtract(as.numeric(substr(diary, 20, 22)), 273.15))\n#                                         \\_1_/\n#                                  \\________2__________/\n#                       \\___________________3__________/\n#              \\____________________________4____________________/\n#         \\_________________________________5____________________/\n\n# 1. Take diary\n# 2. Extract values 20 to 22 on each line\n# 3. Convert \"character\" to \"numeric\"\n# 4. Subtract 273.15\n# 5. Calculate the mean\n```\n:::\n\n\nThe whole operation is a little easier to read if it is written down sequentially:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- substr(diary, 20, 22)  # 2\ntemp <- as.numeric(temp)       # 3\ntemp <- subtract(temp, 273.15) # 4\noutput <- mean(temp)           # 5\n```\n:::\n\n\nThe fact that the intermediate results must always be saved and retrieved again in the subsequent operation makes this somewhat cumbersome. This is where \"piping\" comes into play: *It makes the output of one function the first parameter of the subsequent function.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiary |>              # 1\n  substr(20, 22) |>   # 2\n  as.numeric() |>     # 3\n  subtract(273.15) |> # 4\n  mean()              # 5\n## [1] 74.18333\n```\n:::\n\n\n:::{.callout-important}\n- the `|>` pipe operator was first introduced in R `4.1`\n- In addition to the *base R* pipe operator, there is also a very similar[^pipe] pipe operator, `%>%`, in the `magrittr` package.\n- The <kbd>Ctrl</kbd> +<kbd>Shift</kbd>+<kbd>M</kbd> keyboard shortcut in RStudio inserts a pipe operator.\n- By checking the Use native pipe operator setting in RStudio Settings `Tools` → `Global Options` → `Code`, you can control which `pipe operator`, `|>` or `%>%`, is inserted with the above key combination.\n- We recommend using the base-R pipe operator `|>`\n:::\n\n[^pipe]: see <https://stackoverflow.com/q/67633022/4139249>\n\n## Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- data.frame(\n  Matriculation_No = c(100002, 100003, 200003),\n  Student = c(\"Patrick\", \"Manuela\", \"Eva\"),\n  ZIP = c(8006, 8001, 8820)\n)\n\nstudents\n##   Matriculation_No Student  ZIP\n## 1           100002 Patrick 8006\n## 2           100003 Manuela 8001\n## 3           200003     Eva 8820\n\nlocalities <- data.frame(\n  ZIP = c(8003, 8006, 8810, 8820),\n  LocalityName = c(\"Zurich\", \"Zurich\", \"Horgen\", \"Wadenswil\")\n)\n\nlocalities\n##    ZIP LocalityName\n## 1 8003       Zurich\n## 2 8006       Zurich\n## 3 8810       Horgen\n## 4 8820    Wadenswil\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load library\nlibrary(\"dplyr\")\n\ninner_join(students, localities, by = \"ZIP\")\n##   Matriculation_No Student  ZIP LocalityName\n## 1           100002 Patrick 8006       Zurich\n## 2           200003     Eva 8820    Wadenswil\n\nleft_join(students, localities, by = \"ZIP\")\n##   Matriculation_No Student  ZIP LocalityName\n## 1           100002 Patrick 8006       Zurich\n## 2           100003 Manuela 8001         <NA>\n## 3           200003     Eva 8820    Wadenswil\n\nright_join(students, localities, by = \"ZIP\")\n##   Matriculation_No Student  ZIP LocalityName\n## 1           100002 Patrick 8006       Zurich\n## 2           200003     Eva 8820    Wadenswil\n## 3               NA    <NA> 8003       Zurich\n## 4               NA    <NA> 8810       Horgen\n\nfull_join(students, localities, by = \"ZIP\")\n##   Matriculation_No Student  ZIP LocalityName\n## 1           100002 Patrick 8006       Zurich\n## 2           100003 Manuela 8001         <NA>\n## 3           200003     Eva 8820    Wadenswil\n## 4               NA    <NA> 8003       Zurich\n## 5               NA    <NA> 8810       Horgen\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- data.frame(\n  Matriculation_No = c(100002, 100003, 200003),\n  Student = c(\"Patrick\", \"Manuela\", \"Pascal\"),\n  Residence = c(8006, 8001, 8006)\n)\n\nleft_join(students, localities, by = c(\"Residence\" = \"ZIP\"))\n##   Matriculation_No Student Residence LocalityName\n## 1           100002 Patrick      8006       Zurich\n## 2           100003 Manuela      8001         <NA>\n## 3           200003  Pascal      8006       Zurich\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}