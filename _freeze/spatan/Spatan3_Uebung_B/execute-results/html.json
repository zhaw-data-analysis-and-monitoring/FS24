{
  "hash": "8432e80dbb9247da659542f854cc97de",
  "result": {
    "markdown": "---\ndate: 2024-05-07\nlesson: SpatAn3\ntopic: Spatial Interpolation\nindex: 2\nexecute:\n  echo: true # set to true to show sample solution\n  output: true # set to true to show sample solution\ncode-fold: true\ncode-summary: \"Sample Solution\"\nknitr:\n  opts_chunk:\n    collapse: true\n---\n\n\n# SpatAn 3: Exercise B\n\n\n::: {.cell}\n\n:::\n\n\nThis exercise is about implementing two different interpolation methods in R. In the first interpolation method we will use *inverse distance weighted interpolation*. Later, we will use the *nearest neighbour* method. To do this, you will need the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"gstat\")\n```\n:::\n\n\nYou will also need the following datasets:\n\n\n\n```{.r .cell-code  code-fold=\"false\"}\nair_quality <- read_sf(\"datasets/rauman/luftqualitaet.gpkg\")\nswitzerland <- read_sf(\"datasets/rauman/schweiz.gpkg\")\n```\n\n\nThe `gstat` library offers various options for interpolating data points, including the *inverse distance weighted* method. Unfortunately, the package is not yet as user-friendly as `sf`: however, the package is currently being revised and it should be just as easily accessible in the future. So that you do not have to deal with the peculiarities of this library, we have prepared a function that should make it easier for you to use the IDW interpolation.\n\nWe have taken away some of the complexity and have provided you with a ready-to-use tool. While we provide a simpler function for ease of use, we also encourage those who can to explore and understand this function in detail, or even better, use the `gstat` package instead. If you want to work with our function, you have to copy and execute the code below into your script.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy_idw <- function(groundtruth, column, cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){\n  library(\"gstat\")\n  library(\"sf\")\n\n  if(is.null(extent)){\n    extent <- groundtruth\n  }\n\n  samples <- st_make_grid(extent, cellsize, what = \"centers\")\n  my_formula <- formula(paste(column,\"~1\"))\n  idw_sf <- gstat::idw(formula = my_formula, groundtruth, newdata = samples, nmin = 1, nmax = nmax, maxdist = maxdist, idp = idp)\n\n  idw_matrix <- cbind(as.data.frame(st_coordinates(idw_sf)), pred = st_drop_geometry(idw_sf)[,1])\n  idw_matrix\n}\n```\n:::\n\n\nNow you can interpolate the `air_quality` data set with `my_idw()`as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy_idw(groundtruth = air_quality, column = \"value\", cellsize = 10000, extent = switzerland)\n```\n:::\n\n\nThe following parameters are available:\n\n- **Necessary parameters**:\n   - `groundtruth`: point data record with measured values (`sf`object)\n   - `column`: name of the column with the measured values (in quotation marks and closing characters)\n   - `cellsize`: cell size of the output raster\n- **Optional parameters**\n   - `nmax`: maximum number of points to be taken into account for the interpolation. Default: `Inf` (all values in the given search radius)\n   - `maxdist`: Search radius to be used for interpolation. Default `Inf` (all values up to `nmax`)\n   - `idp`: ***Inverse Distance* Power:** the power with which the denominator is to be increased. Default: `2`. Values are weighted in the reciprocal of the square: $\\frac{1}{dist^{idp}}$.\n   - `extent`: area for which the interpolation is to be carried out. If nothing is specified (default `ZERO`), the extension of groundtruth `is` used.\n- **Ouput**\n   - the output of the function is a `data.frame` with 3 columns:\n      - `X`, `Y` coordinates of the interpolated values\n      - `pred`: the Interpolated Value\n\nThe output is a raster-like data type (see *Spatial Data Science* 1 lecture). We can visualise this with `geom_raster()` with `ggplot`. To do this, you must specify the `X` and `Y` coordinates in `aes`, and colour the interpolated value with `fill`.\n\n### Task 1: Spatial interpolation with IDW\n\nCalculates the IDW for the air quality measurements with different parameters and visualise the results in each case. Experiment with `nmax` and `maxdist`. What do you find?\n\nTips:\n\n- You can find out what distances make sense with `maxdist` from the output of the G function (previous exercise)\n- At the beginning, choose a slightly conservative (large) `cellsize` and only reduce it if your computer can handle it well\n- Since the output from the interpolation is in the same coordinate reference system as `schweiz.gpkg`, these two data sets can be displayed in the same `ggplot`. For this, you have to set the *aesthetics* (`aes()`) for each layer individually, and not at the level of `ggplot()`.\n\n::: {.column-body}\n\n::: {.cell}\n\n```\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n```\n\n::: {.cell-output-display}\n![Nitrogen Dioxide (NO2) in μg/m3, Interpolate over all of Switzerland using the Inverse Distance Weighted Method. The various plots depict changes in the Interpolation with increasing IDP values](Spatan3_Uebung_B_files/figure-html/fig-ggplot-ex1-1.png){#fig-ggplot-ex1 width=672}\n:::\n:::\n\n:::\n\n### Task 2: Interpolation with Nearest Neighbour\n\nAnother simple way to interpolate is the creation of a Voronoi diagram, also known as Thiessen polygons or Dirichlet decomposition. `sf` has a `st_voronoi()` function, which assumes a point data set and constructs Thiessen polygons around the points. All it takes is a small preprocessing step: `sf` wants a voronoi diagram for each feature, i.e. for each *line* in our data set. This makes little sense for us, because each line consists of only one point. Therefore, we must first convert `air_quality` with `st_union()` from a `POINT` to a `MULTIPOINT` object in which all points are summarised in one line.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Spatan3_Uebung_B_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n`st_voronoi()` has pulled the Thiessen polygons a little further than we want them. However, this is a nice illustration of the edge effects of Thiessen polygons, which can become very large towards the edge (where it has fewer and fewer points). We can clip the polygons to just Switzerland with `st_intersection()`. Here, too, two small pre-processing steps are required:\n\n1. As before, we have to merge the individual cantonal polygons. We achieve this with `st_union()`. We save the output as `switzerland`, which as a result returns a single polygon in the shape of the Swiss borders.\n2. For the Thiessen polygons, we do exactly the opposite: `st_voronoi()` provides a single feature with all polygons, which has not been clipped. With `st_cast()`, the `GEOMETRYCOLLECTION` is divided into single polygons.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Spatan3_Uebung_B_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNow we just need to determine the respective value for each polygon. We achieve this again with `st_join()`. Here, too, a *small* preprocessing step is necessary: We convert the `sfc` object (only geometries) into an `sf` object (geometries with attribute table).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Nitrogen Dioxide (NO2) in μg/m3, Interpolate all of Switzerland using the Nearest Neighbour method.](Spatan3_Uebung_B_files/figure-html/fig-ggplot-ex2-final-1.png){#fig-ggplot-ex2-final width=672}\n:::\n:::\n",
    "supporting": [
      "Spatan3_Uebung_B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}