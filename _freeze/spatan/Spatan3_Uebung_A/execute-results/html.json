{
  "hash": "bb5c78dfa1df84f25de4a89a756a647e",
  "result": {
    "markdown": "---\ndate: 2023-12-04\nlesson: SpatAn3\ntopic: Density values\nindex: 1\nexecute:\n  echo: false   # set to true to show sample solution\n  output: false # set to true to show sample solution\ncode-fold: true\ncode-summary: \"Sample Solution\"\nknitr:\n  opts_chunk:\n    collapse: true  \n---\n\n\n# SpatAn 3: Exercise A\n\nFor today's exercise, we need the following datasets. Import these into R. Check whether the CRS has been set correctly, set it if necessary. Familiarise yourself with the data (visualise, scroll through, etc.).\n\n- *rotmilan.gpkg*: This dataset comes from a larger research project of the [Sempach Bird Observatory](https://www.vogelwarte.ch/de/projekte/oekologische-forschung/mechanismen-der-populationsdynamik-beim-rotmilan), which was made available via the movebank platform (see @scherler2020). It is based on the movements of a single bird which has been equipped with a transmitter since 2017 and travels all over Central Europe. In this exercise, we will only work with the data points recorded in Switzerland. If you want to analyse the entire data set, you can download it via the Movebank link.\n- *luftqualitaet.gpkg*: This dataset includes measurements of nitrogen dioxide $NO_2$ from 2015 at 97 measurement points in Switzerland. Nitrogen dioxide is produced during the combustion of fuels, especially at high combustion temperatures, with road traffic as the main source.\n   More information can be found [here](https://www.bafu.admin.ch/bafu/de/home/themen/thema-luft/luft--daten--indikatoren-und-karten/luft--indikatoren/indikator-luft.pt.html/aHR0cHM6Ly93d3cuaW5kaWthdG9yZW4uYWRtaW4uY2gvUHVibG/ljL0FlbURldGFpbD9pbmQ9TFUwMjAmbG5nPWRlJlN1Ymo9Tg%3d%3d.html).\n- *schweiz.gpkg*: Swiss border\n\nFirst of all, we want to carry out density estimates for the `air_quality` and `red_kites` data sets. Load the necessary packages into your R session beforehand.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\nlibrary(\"spatstat.geom\")\nlibrary(\"spatstat.explore\")\n```\n:::\n\n\n\n\n## Task 1: Visualise red kite movement data\n\nThe first question typically asked in such movement studies is: *where can this bird usually be found?* To answer this question, the first thing to do is simply visualise the data points in a simple map. Create the map below to answer this question.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Spatan3_Uebung_A_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Task 2: Calculate Kernel Density Estimation\n\nAt first, this approach appears to work, but here we encounter the typical problem of \"overplotting\". This means that due to the overlay of many points in dense regions, we cannot estimate how many points are actually there and potentially overlapping. There are various ways to visualise the point density more clearly. A very popular method among biologists is density distribution with a Kernel Density Estimation (KDE). This is mainly because the habitat (home range) of an animal can be estimated using KDE. Home ranges are often defined with KDE95 and core areas are defined with KDE50 ([Fleming C., Calabrese J., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12673)).\n\nTo calculate the density, we use the `density.ppp` function from` spatstat`. This library is somewhat complex to use, but so that we can still apply this method to our red kite data, we have created our own KDE function.\n\nWe encourage those of you who can study our function in detail to not use it, and instead to use `spatstat` directly. If you want to work with our function, you'll need to copy and execute the code below into your script.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmy_kde <- function(points, cellsize, bandwith, extent = NULL){\n  library(\"spatstat.geom\")    # to convert to ppp\n  library(\"spatstat.explore\") # to calculate density\n\n  points_ppp <- as.ppp(points) # convert sf > ppp\n\n  if(!is.null(extent)){\n    # if an extent has been given, this will be used\n    # to set the observation window\n    Window(points_ppp) <- as.owin(st_bbox(extent))\n  }\n\n  # Calculate density\n  points_density <- density.ppp(x = points_ppp, sigma = bandwith, eps = cellsize)\n\n  # Convert Output in a DataFrame\n  points_density_df <- as.data.frame(points_density)\n\n  points_density_df\n}\n```\n:::\n\n\nThe parameters of the function should be relatively clear:\n\n- `points`: a point record from the class `sf`\n- `cellsize`: the cell size of the output grid\n- `bandwith`: The search radius for the density calculation\n- `extent` (optional): the perimeter in which the density distribution is to be calculated. If no perimeter is specified, the \"bounding box\" of `points` should be used.\n\nIf we now use `my_kde()` to calculate density distribution, we get a `data.frame` with X and Y coordinates and a `value` column. Use these three columns with `geom_raster()` to visualise your `data` with `ggplot` `aes(x = X, y = Y, fill = value)`.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nred_kites_kde <- my_kde(points = red_kites, cellsize = 1000, bandwith = 10000, extent = switzerland)\n\nhead(red_kites_kde)\n##         x       y        value\n## 1 2485909 1075767 5.706506e-24\n## 2 2485909 1076766 8.289075e-23\n## 3 2485909 1077764 3.029525e-23\n## 4 2485909 1078763 6.521282e-23\n## 5 2485909 1079761 9.598037e-23\n## 6 2485909 1080760 1.182799e-22\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Spatan3_Uebung_A_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe kernel density estimation is now very much dominated by low values, as the density in most cells of our study area is close to zero. As mentioned, scientists are often only interested in the highest 95% of values. Follow these steps to depict results a little better:\n\n1. Calculate the 95th percentile of all values with the function `quantile` and name this `q95`\n2. Create a new column in `red_kites_kde` in which all values are lower than `q95` `NA`\n3. (Optional): Transform the values with log10 to get a more differentiated gradient\n\nWe can hide the low values by representing only the highest 5% of the values. To accomplish this, we use `raster::quantile` to calculate the 95th percentile of all values and use this value as a \"limit value\" for the representation.\n\nIn addition, a logarithmic transformation of the values helps to make the colour scale somewhat more visible.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Spatan3_Uebung_A_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Task 3: Density distribution with Thiessen polygons\n\nThiessen polygons offer an exciting alternative for visualising differences in the density distribution of points in data sets.\nWe now want to try this out and construct Thiessen polygons for the red kite data in Switzerland. Use the instructions for creating Thiessen polygons from exercise B to create Thiessen polygons for the red kite positions.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![It will be clearer if we depict Thiessen polygons without points, just how density within clusters appears](Spatan3_Uebung_A_files/figure-html/fig-ggplot-ex2-thiessen-1.png){#fig-ggplot-ex2-thiessen width=672}\n:::\n:::\n",
    "supporting": [
      "Spatan3_Uebung_A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}